package config_test

import (
	"github.com/craigmonson/colonize/config"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	"github.com/oleiade/reflections"
)

var _ = Describe("Config/Config", func() {
	Describe("func LoadConfig", func() {
		Context("given a complete config file", func() {
			path := "../test/.colonize.yaml"
			conf, err := config.LoadConfig(path)

			It("should not return an error", func() {
				Ω(err).ShouldNot(HaveOccurred())
			})

			It("should return the proper type", func() {
				testConf := config.ColonizerConfig{}
				Ω(*conf).To(BeAssignableToTypeOf(testConf))
			})

			attributes := map[string]string{
				"Autogenerate_Comment":      "This file generated by colonizer.",
				"Combined_Vals_File":        "_combined.tfvars",
				"Combined_Vars_File":        "_combined_variables.tf",
				"Combined_Tf_File":          "_combined.tf",
				"Vars_File_Env_Post_String": "_variables.tf",
				"Vals_File_Env_Post_String": ".tf",
				"Templates_Dir":             "config",
				"Environments_Dir":          "config",
			}

			for k := range attributes {
				var key = k

				It(k+" should be the correct value", func() {
					var val = attributes[key]
					confVal, _ := reflections.GetField(conf, key)
					Ω(confVal).To(Equal(val))
				})
			}
		})
	})

	Describe("func LoadConfigInTree", func() {
		Context("given a path (tree) to search for the config", func() {
			path := "../test"
			conf, err := config.LoadConfigInTree(path)

			It("should not return an error", func() {
				Ω(err).ShouldNot(HaveOccurred())
			})

			It("should return the proper type", func() {
				testConf := config.ColonizerConfig{}
				Ω(*conf).To(BeAssignableToTypeOf(testConf))
			})
		})
	})
})
